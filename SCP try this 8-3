#include <stdio.h>
#include <stdlib.h>
#include <libssh/libssh.h>
#include <libssh/scp.h>

// Function to copy a remote file to a local file
int scp_get(ssh_session session, const char *remote_file, const char *local_file) {
    int rc;
    ssh_scp scp;
    int mode;
    char buffer[4096];
    size_t nbytes;

    // Open SCP session for reading from remote file
    scp = ssh_scp_new(session, SSH_SCP_READ, remote_file);
    if (scp == NULL) {
        return SSH_ERROR;
    }

    // Initialize SCP transfer
    rc = ssh_scp_init(scp);
    if (rc != SSH_OK) {
        ssh_scp_free(scp);
        return rc;
    }

    // Get file mode
    mode = ssh_scp_file_mode(scp);

    // Open local file for writing
    FILE *fp = fopen(local_file, "wb");
    if (fp == NULL) {
        ssh_scp_free(scp);
        return SSH_ERROR;
    }

    // Read from remote file and write to local file
    while (1) {
        nbytes = ssh_scp_read(scp, buffer, sizeof(buffer));
        if (nbytes == 0) {
            break;
        }
        fwrite(buffer, 1, nbytes, fp);
    }

    // Set file mode of local file
    chmod(local_file, mode);

    // Cleanup
    fclose(fp);
    ssh_scp_free(scp);
    return SSH_OK;
}

int main(int argc, char **argv) {
    ssh_session session;
    int rc;

    // Check command line arguments
    if (argc < 5) {
        printf("Usage: %s <host> <username> <password> <remote_file> <local_file>\n", argv[0]);
        return 1;
    }

    // Initialize SSH library
    ssh_init();

    // Create SSH session
    session = ssh_new();
    if (session == NULL) {
        ssh_finalize();
        return 1;
    }

    // Set options for SSH session
    ssh_options_set(session, SSH_OPTIONS_HOST, argv[1]);
    ssh_options_set(session, SSH_OPTIONS_USER, argv[2]);
    ssh_options_set(session, SSH_OPTIONS_PASSWORD, argv[3]);

    // Connect to SSH server
    rc = ssh_connect(session);
    if (rc != SSH_OK) {
        printf("Error connecting to %s: %s\n", argv[1], ssh_get_error(session));
        ssh_disconnect(session);
        ssh_free(session);
        ssh_finalize();
        return 1;
    }

    // Authenticate SSH session
    rc = ssh_userauth_password(session, NULL, argv[3]);
    if (rc != SSH_AUTH_SUCCESS) {
        printf("Error authenticating with password: %s\n", ssh_get_error(session));
        ssh_disconnect(session);
        ssh_free(session);
        ssh_finalize();
        return 1;
    }

    // Copy remote file to local file
    rc = scp_get(session, argv[4], argv[5]);
    if (rc != SSH_OK) {
        printf("Error copying file: %s\n", ssh_get_error(session));
        ssh_disconnect(session);
        ssh_free(session);
        ssh_finalize();
        return 1;
    }

    // Disconnect and cleanup
    ssh_disconnect(session);
    ssh_free(session);
    ssh_finalize();

    return 0;
}
./scp_example example.com myuser mypassword /home/user/myfile.txt /tmp/myfile.txt






 Change with this 

int main() {
    ssh_session session;
    int rc;

    // Set command line arguments
    const char *host = "example.com";
    const char *username = "myuser";
    const char *password = "mypassword";
    const char *remote_file = "/home/user/myfile.txt";
    const char *local_file = "/tmp/myfile.txt";

    // Initialize SSH library
    ssh_init();

    // Create SSH session
    session = ssh_new();
    if (session == NULL) {
        ssh_finalize();
        return 1;
    }

    // Set options for SSH session
    ssh_options_set(session, SSH_OPTIONS_HOST, host);
    ssh_options_set(session, SSH_OPTIONS_USER, username);
    ssh_options_set(session, SSH_OPTIONS_PASSWORD, password);

    // Connect to SSH server
    rc = ssh_connect(session);
    if (rc != SSH_OK) {
        printf("Error connecting to %s: %s\n", host, ssh_get_error(session));
        ssh_disconnect(session);
        ssh_free(session);
        ssh_finalize();
        return 1;
    }

    // Authenticate SSH session
    rc = ssh_userauth_password(session, NULL, password);
    if (rc != SSH_AUTH_SUCCESS) {
        printf("Error authenticating with password: %s\n", ssh_get_error(session));
        ssh_disconnect(session);
        ssh_free(session);
        ssh_finalize();
        return 1;
    }

    // Copy remote file to local file
    rc = scp_get(session, remote_file, local_file);
    if (rc != SSH_OK) {
        printf("Error copying file: %s\n", ssh_get_error(session));
        ssh_disconnect(session);
        ssh_free(session);
        ssh_finalize();
        return 1;
    }

    // Disconnect and cleanup
    ssh_disconnect(session);
    ssh_free(session);
    ssh_finalize();

    return 0;
}
