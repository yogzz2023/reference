#include <libssh/libssh.h>

int scp_get(ssh_session session, const char *remote_file, const char *local_file) {
    int rc;
    ssh_scp scp;
    int mode;
    char buffer[4096];

    // Open SCP session for reading from remote file
    scp = ssh_scp_new(session, SSH_SCP_READ, remote_file);
    if (scp == NULL) {
        return SSH_ERROR;
    }

    // Initialize SCP transfer
    rc = ssh_scp_init(scp);
    if (rc != SSH_OK) {
        ssh_scp_free(scp);
        return rc;
    }

    // Get file mode
    mode = ssh_scp_file_mode(scp);

    // Open local file for writing
    FILE *fp = fopen(local_file, "w");
    if (fp == NULL) {
        ssh_scp_free(scp);
        return SSH_ERROR;
    }

    // Read from remote file and write to local file
    while (1) {
        rc = ssh_scp_read(scp, buffer, sizeof(buffer));
        if (rc == SSH_ERROR) {
            fclose(fp);
            ssh_scp_free(scp);
            return rc;
        } else if (rc == 0) {
            break;
        }
        fwrite(buffer, 1, rc, fp);
    }

    // Set file mode of local file
    chmod(local_file, mode);

    // Cleanup
    fclose(fp);
    ssh_scp_free(scp);
    return SSH_OK;
}

int main() {
    ssh_session session;
    const char *remote_file = "/path/to/remote/file";
    const char *local_file = "/path/to/local/file";
    int rc;

    // Initialize SSH session
    session = ssh_new();
    if (session == NULL) {
        return SSH_ERROR;
    }

    // Set SSH options (hostname, username, password or key)
    ssh_options_set(session, SSH_OPTIONS_HOST, "remote-host");
    ssh_options_set(session, SSH_OPTIONS_USER, "remote-user");
    ssh_options_set(session, SSH_OPTIONS_PASSWORD, "remote-password");

    // Connect to SSH server
    rc = ssh_connect(session);
    if (rc != SSH_OK) {
        ssh_free(session);
        return rc;
    }

    // Authenticate with SSH server
    rc = ssh_userauth_password(session, NULL, "remote-password");
    if (rc != SSH_AUTH_SUCCESS) {
        ssh_disconnect(session);
        ssh_free(session);
        return rc;
    }

    // Get remote file using SCP
    rc = scp_get(session, remote_file, local_file);
    if (rc != SSH_OK) {
        ssh_disconnect(session);
        ssh_free(session);
        return rc;
    }

    // Disconnect and cleanup
    ssh_disconnect(session);
    ssh_free(session);
    return 0;
}
