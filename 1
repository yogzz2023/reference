#include <libssh/libssh.h>
#include <stdio.h>

int scp_file(const char *local_file, const char *remote_host, const char *remote_path) {
    // Connect to remote host using SSH
    ssh_session session = ssh_new();
    ssh_options_set(session, SSH_OPTIONS_HOST, remote_host);
    int rc = ssh_connect(session);
    if (rc != SSH_OK) {
        fprintf(stderr, "Error connecting to remote host: %s\n", ssh_get_error(session));
        return rc;
    }

    // Authenticate using default credentials
    rc = ssh_userauth_publickey_auto(session, NULL, NULL);
    if (rc != SSH_AUTH_SUCCESS) {
        fprintf(stderr, "Error authenticating to remote host: %s\n", ssh_get_error(session));
        ssh_disconnect(session);
        ssh_free(session);
        return rc;
    }

    // Open local file for reading
    FILE *local_fp = fopen(local_file, "rb");
    if (local_fp == NULL) {
        fprintf(stderr, "Error opening local file: %s\n", strerror(errno));
        ssh_disconnect(session);
        ssh_free(session);
        return errno;
    }

    // Create remote file for writing
    ssh_scp scp = ssh_scp_new(session, SSH_SCP_WRITE, remote_path);
    if (scp == NULL) {
        fprintf(stderr, "Error creating SCP session: %s\n", ssh_get_error(session));
        fclose(local_fp);
        ssh_disconnect(session);
        ssh_free(session);
        return SSH_ERROR;
    }

    // Initiate the SCP transfer
    rc = ssh_scp_init(scp);
    if (rc != SSH_OK) {
        fprintf(stderr, "Error initializing SCP transfer: %s\n", ssh_get_error(session));
        fclose(local_fp);
        ssh_scp_free(scp);
        ssh_disconnect(session);
        ssh_free(session);
        return rc;
    }

    // Transfer the file contents
    char buf[1024];
    size_t len;
    while ((len = fread(buf, 1, sizeof(buf), local_fp)) > 0) {
        rc = ssh_scp_write(scp, buf, len);
        if (rc != SSH_OK) {
            fprintf(stderr, "Error transferring file: %s\n", ssh_get_error(session));
            fclose(local_fp);
            ssh_scp_free(scp);
            ssh_disconnect(session);
            ssh_free(session);
            return rc;
        }
    }

    // Close the files and terminate the SSH connection
    fclose(local_fp);
    ssh_scp_close(scp);
    ssh_scp_free(scp);
    ssh_disconnect(session);
    ssh_free(session);

    return SSH_OK;
}
